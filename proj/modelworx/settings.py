"""
Django settings for modelworx project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import Config, RepositoryEnv
from django.core.files.storage import default_storage
from django.utils.functional import LazyObject
from storages.backends.s3boto3 import S3Boto3Storage
from django.core.files.storage import FileSystemStorage


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Set ENVIRONMENT - production or development
ENV_PATH = BASE_DIR / 'modelworx' / '.env'

config = Config(RepositoryEnv(str(ENV_PATH)))

ENVIRONMENT = config('ENVIRONMENT', default='development')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vv55ahja25qq(rq8_1&ph5=i$ii$o3t8ri%zsd8t-)6+%bscmo'

DEBUG = config("DJANGO_DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config("DJANGO_ALLOWED_HOSTS", default="localhost").split(",")

# Application definition

INSTALLED_APPS = [
    'automodeler.apps.AutomodelerConfig',
    'admin_two_factor.apps.TwoStepVerificationConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts', # Custom accounts project to create custom views; Works alongside the auth middleware
    'modelworx',
    'rest_framework',
    'rest_framework.authtoken',
    'storages', # Django-storages for S3 compatibility
    'django_cleanup', # Django-cleanup to cleanup files; auto deletes files after they have been deleted
    'django_celery_results',
    "logviewer",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'modelworx.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'modelworx.wsgi.application'

# Required permissions and authentication classes that are used with the API response.
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ],    
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if ENVIRONMENT == 'production':
    DATABASES = {
        'default' : {
            # setup postgre, default to sqlite if config variables not found
            'ENGINE': config('DB_ENGINE', default='django.db.backends.sqlite3'),
            'NAME': config('DB_NAME', default=str(BASE_DIR / 'db.sqlite3')),
            'USER': config('DB_USER', default=''),
            'PASSWORD': config('DB_PASSWORD', default=''),
            'HOST' : config('DB_HOST', default='localhost'),
            'PORT': config('DB_PORT', default='5432'),  # default PostgreSQL Port
        }
    }
else:
    # default: use SQLite for Development 
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR,'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CSRF_TRUSTED_ORIGINS = ["https://modelworx.leviathanworks.net"]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

SESSION_COOKIE_SECURE = True

CSRF_COOKIE_SECURE = True

LOGIN_REDIRECT_URL = "/automodeler/" # Redirect to automodeler url upon login
LOGOUT_REDIRECT_URL = "/automodeler/" # Redirect to automodeler url upon logout

USE_S3 = config('USE_S3', default='False', cast=bool)  # set to true in in .env.production, false in .env

if USE_S3:
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME =config('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_ENDPOINT_URL = config('AWS_S3_ENDPOINT_URL')

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/'
else:
    MEDIA_URL = "/media/"
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

if USE_S3:
    # Force update default_storage to match DEFAULT_FILE_STORAGE
    if isinstance(default_storage, LazyObject) or isinstance(default_storage._wrapped, FileSystemStorage):
        default_storage._wrapped = S3Boto3Storage()

# Celery Broker URL: use env var, fallback to localhost Redis
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='amqp://localhost')
# Celery Result Backend: support django-db or rabbitmq
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='django-db')

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'


# Email settings
EMAIL_ENABLED = config('EMAIL_ENABLED', default='False')
if EMAIL_ENABLED:
  EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
  EMAIL_HOST = config('EMAIL_HOST')
  EMAIL_HOST_USER = config('EMAIL_HOST_USER')
  EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
  EMAIL_PORT = 587
  EMAIL_USE_TLS = True
  EMAIL_USE_SSL = False
  EMAIL_ADMINS = config('EMAIL_ADMINS')
  EMAIL_SENDER = config('EMAIL_SENDER')

# Logging Settings
LOG_DIR = os.path.join(BASE_DIR, 'logs')

if not os.path.exists(LOG_DIR): # Create LOG_DIR if it does not exist
    os.makedirs(LOG_DIR)

AM_LOGGING_FILE = ''.join([LOG_DIR, '/' , config('AUTOMODELER_LOG_FILE', default='automodeler.log')])
CELERY_LOGGING_FILE = ''.join([LOG_DIR, '/' , config('CELERY_LOG_FILE', default='celery.log')])

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        }
    },
    'filters': {
        'uri_filter': {
            '()': 'automodeler.filters.UriFilter',
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            'filters': ['uri_filter'],
        },
        "file": {
            "level": config("FILE_MAX_LOG_LEVEL", default="INFO"),
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": AM_LOGGING_FILE,
            'when': 'midnight',
            'interval': 1,
            'backupCount': 14,
            'formatter': 'verbose',
            'filters': ['uri_filter'],
        },
        'celery': {
            "level": config("FILE_MAX_LOG_LEVEL", default="INFO"),
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": CELERY_LOGGING_FILE,
            'when': 'midnight',
            'interval': 1,
            'backupCount': 14,
            'formatter': 'verbose',      
        }
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": config("CONSOLE_MAX_LOG_LEVEL", default="INFO"),
            "propogate": False,
        },
        'celery': {
            "handlers": ["console", "celery"],
            "level": config("FILE_MAX_LOG_LEVEL", default="INFO"),
            "propogate": False,
        },
    },
}

# Log Viewer
LOGVIEWER_LOGS = [AM_LOGGING_FILE, CELERY_LOGGING_FILE]
LOGVIEWER_REFRESH_INTERVAL = config('LOGVIEWER_REFRESH_INTERVAL', default=1000)

# Two Factor App Name
ADMIN_TWO_FACTOR_NAME = 'Modelworx'



